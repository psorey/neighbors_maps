<!---   show.html.erb -->
<div id='rails_error'></div>
<div class="container-fluid">

<div class="row-fluid">
  <div class="span12">
    <div id="map" class="map"></div>
    <form class="form-inline">
      <label>Geometry type &nbsp;</label>
      <select id="type">
        <option value="None">None</option>
        <option value="Point">Point</option>
        <option value="LineString">LineString</option>
        <option value="Polygon">Polygon</option>
      </select>
    </form>
     <div id="tags">draw, edit, modify, vector, featureoverlay</div>
  </div>
</div>

</div>


<h2 id="title"><%= @theme_map.name %> </h2>

<div>
  <%= link_to 'Edit', edit_theme_map_path(@theme_map) %>
</div>


<script>
/*  var raster =
     new ol.layer.Image({
      // extent: [-122.5,47.5,-122.2,47.75],
         transparent: true,
       source: new ol.source.ImageWMS( ({
         url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
         params: {'LAYERS': 'MS', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
         serverType: 'mapserver'
     }))
  });


var osm =  new ol.layer.Tile({
    source: new ol.source.OSM()
 });

  var map = new ol.Map({
    layers: [raster],
    target: 'map',
    view: new ol.View({
      //projection: 'EPSG:4326',    // default is 3857
      //center: [-122.4,47.6],
      center: [-13620870.52201, 6056409.356303 ],
      zoom: 15
    })
  });


var features = new ol.Collection();
var featureSource = new ol.source.Vector({features:features});
var featureOverlay = new ol.layer.Vector({
  source: featureSource,
  style: new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: '#ff1111',
      width: 3
    }),
    image: new ol.style.Circle({
      radius: 7,
      fill: new ol.style.Fill({
        color: '#ffcc33'
      })
    })
  })
 });

featureSource.on('addfeature', function(event) {
    console.log("addfeature");
});
featureOverlay.setMap(map);

var modify = new ol.interaction.Modify({
  features: features,
  // the SHIFT key must be pressed to delete vertices, so
  // that new vertices can be drawn at the same position
  // of existing vertices
  deleteCondition: function(event) {
    return ol.events.condition.shiftKeyOnly(event) &&
        ol.events.condition.singleClick(event);
  }
});

map.addInteraction(modify);

var draw; // global so we can remove it later
function addInteraction() {
  draw = new ol.interaction.Draw({
    features: features,
    type: (typeSelect.value)
  });
  map.addInteraction(draw);
}

var typeSelect = document.getElementById('type');


typeSelect.onchange = function(e) {
  map.removeInteraction(draw);
  addInteraction();
};

//addInteraction();

var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Layer Controls' // Optional label for button
    });
map.addControl(layerSwitcher);
console.log("added layer switcher");
layerSwitcher.render();

*/

var overlayLayers = [];
var baseLayers = [];

//for i in 


     var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Group({
                'title': 'Base maps',
                layers: [
                    new ol.layer.Tile({
                        title: 'Water color',
                        type: 'base',
                        visible: false,
                        source: new ol.source.Stamen({
                            layer: 'watercolor'
                        })
                    }),
                    new ol.layer.Tile({
                        title: 'OSM',
                        type: 'base',
                        visible: true,
                        source: new ol.source.OSM()
                    }),
                    new ol.layer.Tile({
                        title: 'Satellite',
                        type: 'base',
                        visible: false,
                        source: new ol.source.MapQuest({layer: 'sat'})
                        }),
                    new ol.layer.Image({
                        title: 'Greenwood Aerial',
                        type: 'base',
                        visible: false,
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'greenwood_aerial', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })})
 
                ]
            }),
            new ol.layer.Group({
                title: 'Overlays',
                layers: [
                    new ol.layer.Image({
                        title: 'study blocks',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'study_blocks', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })}),
                    new ol.layer.Image({
                        title: 'study character',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'study_character', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })}),
                    new ol.layer.Image({
                        title: 'study corridors',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'study_corridors', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })}),
                    new ol.layer.Image({
                        title: 'neighbors',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'neighbors', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })}),
                   new ol.layer.Image({
                        title: 'project boundary',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'project_boundary', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })}),

                   new ol.layer.Image({
                        title: 'p-patches',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                        params: {'LAYERS': 'p-patches', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                        serverType: 'mapserver'
                        })})

  
                ]
            })
        ],
        view: new ol.View({
            // center: ol.proj.transform([-0.92, 52.96], 'EPSG:4326', 'EPSG:3857'),
            center: [-13620870.52201, 6056409.356303 ],
            zoom: 15
        })
    });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Layer Controls' // Optional label for button
    });
    map.addControl(layerSwitcher);

</script>

<!--  end show.html.erb  -->
