        <script type="text/javascript">
          
        var geometries = [];
        var geometry_labels = [];
        var exist_features = [];
        var exist_geometries = [];
        var exist_labels = [];
        var map, drawControls, <%=@theme_map.name.dashed%>, <%=@theme_map.name.dashed + '_labels'%>;
          
        $(document).ready(function(){
          console.log("begin open_layers_interactive_functions"); ///// begin open_layers_interactive_functions ////////////////////////////////
          function emptyFeatures(){
            <%= @theme_map.name.dashed %>.destroyFeatures();
            <%= @theme_map.name.dashed  + '_labels' %>.destroyFeatures();
            exist_geometries = [];
            exist_labels = [];
            exist_features = [];
          }

          function buildFeatures(){
            console.log("buildfeatures() exist_geometries = ", exist_geometries);
            if (exist_geometries[0] == 'none found' || exist_geometries == 'none found') {
              console.log(" we must return");
              exist_geometries = []; // it will hold any geometry that we enter via mouse clicks
              exist_labels = [];
              return; 
            }
            geometries = [];
            geometry_labels = [];
            console.log(exist_geometries[0]);
            console.log(exist_geometries[1]);
            console.log(exist_geometries.length);
            for(i=0; i < exist_geometries.length; i = i + 1) { // !!! !!! !!!
              var geom = new OpenLayers.Geometry.fromWKT(unescape(exist_geometries[i]));
              console.log("geom= ", geom);
              feature = new OpenLayers.Feature.Vector(geom, {geometry_feature_attribute: exist_labels[i]});
              exist_features[i] = feature;
             // console.log ("buildFeatures()", feature.geometry.toString());
            }
           // this triggers the makeLabeledDots function through the 'featuresadded' event callback      
           <%= @theme_map.name.dashed %>.addFeatures(exist_features);
          }

          function toggleControl(element) {
            element.preventDefault();
            for(key in drawControls) {
              var control = drawControls[key];
              if(element.value == key && element.checked) {
                control.activate();
              } else {
                control.deactivate();
              }
            }
            makeLabeledDots(<%= @theme_map.name.dashed %>, <%= @theme_map.name.dashed  + '_labels' %>);
          }
               
          function makeLabeledDots(geom_layer, label_layer) {
            var lineFeatures = geom_layer.features; //returns: {Array(OpenLayers.Feature.Vector)}               
            //console.log("make labeled dots: lineFeatures--> length =", lineFeatures.length(), lineFeatures );
            label_layer.destroyFeatures();
            geometries = [];
            geometry_labels = [];
            for (var i = 0; i < lineFeatures.length; i = i+1) {       
              if (lineFeatures[i] != null) {                  
                var geometry = lineFeatures[i].geometry;
                var nodes = lineFeatures[i].geometry.getVertices();
                var lastNode = nodes[nodes.length -1];
                var pointFeature = new OpenLayers.Feature.Vector(lastNode);
                var count = i + '';
                pointFeature.attributes = {
                  geometry_feature_attribute: lineFeatures[i].attributes.geometry_feature_attribute, whichLine: count};
                  label_layer.addFeatures(pointFeature);
                  var wktwriter=new OpenLayers.Format.WKT();
                  var wkt=wktwriter.write(lineFeatures[i]);
                  geometries.push(wkt);
                  geometry_labels.push(lineFeatures[i].attributes.geometry_feature_attribute);
              }
            }
          }
          ///// end open_layers_in
          function showHelp(){
            //    win = new Window('1', {className: "alphacube", title: '<%=@theme_map.name %>',
            //        width:340, height:450, top:70, left:100, zIndex:1500,
            //        destroyOnClose: true });
            //    win.setAjaxContent("/theme_maps/<%=@theme_map.slug%>/send_help",{id: '<%=@theme_map.name.dashed %>'});
            //    win.show();
          }
          function revertSaved(){ // returns javascript to refresh the interactive layers...
            //    emptyFeatures();
            //    new Ajax.Request("/theme_maps/<%=@theme_map.slug%>/revert_geo_db", {
           //      parameters: {
           //        id: '<%=@theme_map.slug%>'
           //      },
           //    });
          }
          $('#update_geo_db').click(function() {
            console.log("in update_geo_db.click --> ", geometries.toSource(), geometry_labels.toSource());
            var request = $.ajax({
              url: "/theme_maps/<%=@theme_map.slug%>/update_geo_db",
              type: "POST",
              data: {geometries: geometries.toSource(), labels: geometry_labels.toSource()},
              dataType: "html"
            });
            request.done(function( msg ) {
              $("#rails_error").text("it says we're done: " + msg);
            });
            request.fail(function( jqXHR, textStatus ) {
              $("#rails_error").text("error: " + jqXHR.responseXML);
            });
          });
          //  onSuccess: function(){
          //    $("indicator").show();
          //    $("indicator").fade({ duration: 5.0 });
          //  }
          map = new OpenLayers.Map('map', {maxExtent: new OpenLayers.Bounds(1259300,253000,1269500,263500)});
          // end of document.ready
        
        <%= render :partial => 'map_layers', :collection => @theme_map.theme_map_layers, :as => :tml  %>
        <%= render :partial => 'open_layers_init' %>
        <% if @theme_map.is_interactive -%>
          <%= render :partial => 'open_layers_interactive_init' %>
        <% end -%>
     });
        </script>

        <div id='rails_error'></div>
        <% if @theme_map.is_interactive -%>
        <% end -%>

        <div id="map" class="smallmap"></div>
        <h2 id="title"><%= @theme_map.name %> </h2>

        <div>
          <%= link_to 'Edit', edit_theme_map_path(@theme_map) %>
        </div>
