<!---   show.html.erb -->

  <div class="container-fluid">
    <div class="row-fluid">
      <div class="span12">
        <div id="map" class="map"></div>
        <form class="form-inline">
          <table class='my-map-controls'>
            <tr>
              <td><label>geometry type &nbsp;</label>
                <select id="type">
                  <option value="None" selected >none</option>
                  <option value="Point">point</option>
                  <option value="LineString">line</option>
                  <option value="Polygon">polygon</option>
                </select>
              </td>
            </form>
              <td><%= button_to "revert", revert_geo_db_theme_map_path, id: @theme_map.slug, method: "post"  %></td>
              <td><%= button_to "save", update_geo_db_theme_map_path, id: @theme_map.slug, method: "post"   %></td>
              <td><%= button_to "help", @theme_map, class: "nav_link", id: "help"  %></td>
              <td><%= link_to 'Edit theme map', edit_theme_map_path(@theme_map) %></td>
            </tr>
          </table>
          <div style="height: 30px; width: 90px;">
            <div id="indicator" style="display: none; height: 20px; text-align: center;" >edits saved</div>
          </div>
        <div id="tags">draw, edit, modify, vector, featureoverlay</div>
      </div>
    </div>
  </div>

<div>
  <%= link_to 'Edit theme map', edit_theme_map_path(@theme_map) %>
</div>




<script>

$( document ).ready(function() {
    $("#type").selectedIndex = 0;
    //console.log("select should be none");
    $("#type").css( "border", "1px solid red" );
});

var overlayLayers = [];
var baseLayers = [];

// if interactive
// begin setup of overlay drawing and editing...
   var features = new ol.Collection();
   var featureSource = new ol.source.Vector({features:features});
   var labels = new ol.Collection();
   var labelSource = new ol.source.Vector({features:labels});

var <%= @theme_map.name.dashed %>;
var <%= @theme_map.name.dashed + '_labels'%>;


var fill = new ol.style.Fill({
  color: 'rgba(0,0,0,0.2)'
});


var stroke = new ol.style.Stroke({
  color: 'rgba(0,0,0,0.6)',
  width: 2
  });


var getText = function(feature /*, resolution*/) {
  var maxResolution = 10000000;
  var text = feature.get('times_per_month');
  if (resolution > maxResolution) {
    text = '';
  }
  return text;
};

var createTextStyle = function(feature /*, resolution */) {
  return new ol.style.Text({
    textAlign: "Start",
    textBaseline: "Middle",
    font: 'Normal 12px Arial',
    text: getText(),
    fill: new ol.style.Fill({
      color: '#222222'
    }),
    stroke: new ol.style.Stroke({
      color: '#000000',
      width: 1
    }),
    offsetX: -3,
    offsetY: 5,
    rotation: 0
  });
};



// circles
var createCircleStyle = function() {
  return function(feature, resolution) {
    var style = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'blue',
        width: 1
      }),
      fill: new ol.style.Fill({
        color: 'rgba(0, 0, 255, 0.1)'
      }),
      text: createTextStyle(feature /*, resolution */)
    });
    return [style];
  };
};


var circleText =  new ol.style.Text({
  textAlign: "Start",
  textBaseline: "Middle",
  font: 'Normal 12px Arial',
  text: "8",
  fill: new ol.style.Fill({
    color: '#222222'
  }),
  stroke: new ol.style.Stroke({
    color: '#000000',
    width: 1
  }),
  offsetX: -3,
  offsetY: 5,
  rotation: 0
});


var circleStyle = new ol.style.Circle({
  radius: 8,
  fill: fill,
  stroke: stroke,
  text: circleText
});



var vectorStyle = new ol.style.Style({
  fill: fill,
  stroke: stroke,
  // image: circle,
  //text: circleText
});


var map = new ol.Map({
        target: 'map',
        layers: [  /*
            new ol.layer.Group({
                'title': 'base maps',
                layers: [
                    new ol.layer.Tile({
                        title: 'watercolor',
                        type: 'base',
                        visible: true,
                        opacity: .4,
                        source: new ol.source.Stamen({ layer: 'watercolor' })
                    }),
                    new ol.layer.Tile({
                        title: 'openStreetMap',
                        type: 'base',
                        visible: false,
                        source: new ol.source.OSM()
                    }),
                    new ol.layer.Tile({
                        title: 'satellite',
                        type: 'base',
                        visible: false,
                        source: new ol.source.MapQuest({layer: 'sat'})
                        }),
                    new ol.layer.Image({
                        title: 'greenwood aerial',
                        type: 'base',
                        visible: false,
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                           params: {'LAYERS': 'greenwood_aerial', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                           serverType: 'mapserver'
                        })})  
                ]
            }),  */


            new ol.layer.Group({
                title: 'overlays',
                layers: [
                    new ol.layer.Image({
                        title: 'study blocks',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                           params: {'LAYERS': 'study_blocks', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                           serverType: 'mapserver'
                        })}),
                    new ol.layer.Image({
                        title: 'study character',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                           params: {'LAYERS': 'study_character', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                           serverType: 'mapserver'
                        })}),
                    new ol.layer.Image({
                        title: 'study corridors',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                           params: {'LAYERS': 'study_corridors', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                           serverType: 'mapserver'
                        })}),
                  new ol.layer.Image({
                      title: 'neighbors',
                      source: new ol.source.ImageWMS({
                         url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                         params: {'LAYERS': 'neighbors', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                         serverType: 'mapserver'
                      })}),
                   new ol.layer.Image({
                        title: 'project boundary',
                        source: new ol.source.ImageWMS({
                           url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
                           params: {'LAYERS': 'project_boundary', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
                           serverType: 'mapserver'
                        })}),
  //                 new ol.layer.Image({
  //                      title: 'half-blocks',
  //                      source: new ol.source.ImageWMS({
  //                         url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
  //                         params: {'LAYERS': 'half_blocks', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
  //                         serverType: 'mapserver'
  //                      })}),
  //                 new ol.layer.Image({
  //                      title: 'p-patches',
  //                      source: new ol.source.ImageWMS({
  //                         url: 'http://localhost/cgi-bin/mapserv?map=/home/paul/mapserver/gs_team_study_areas.map',
  //                         params: {'LAYERS': 'p-patches', 'VERSION': '1.1.1', 'SRS':'EPSG:3875' },
  //                         serverType: 'mapserver'
  //                         })}),


                  // begin setup of overlay drawing and editing...

                  <%= @theme_map.name.dashed %> = new ol.layer.Vector({
                      title: "<%= @theme_map.name %>",  // /var featureOverlay = new ol.layer.Vector({
                      source: featureSource,
                      style: vectorStyle
                  }),

                  <%= @theme_map.name.dashed + '_labels' %> = new ol.layer.Vector({
                      title: "<%= @theme_map.name + 'Labels' %>",  // /var featureOverlay = new ol.layer.Vector({
                      source: labelSource,
                      style: circleStyle //createCircleStyle
                  })
                ]
            })
        ],
        view: new ol.View({
            // center: ol.proj.transform([-0.92, 52.96], 'EPSG:4326', 'EPSG:3857'),
            center: [-13620870.52201, 6056409.356303 ],
            zoom: 14
        })
    });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'layer controls'   // Optional label for button
    });

    map.addControl(layerSwitcher);
    var scaleControl = new ol.control.ScaleLine();
    map.addControl(scaleControl);

    /////////////////////////////////////////  interactive ///////////////////////////////


    var prompt_title = 'enter a number';               // @theme_map.prompt_title
    var prompt_string = 'estimated trips per month';   // @theme_map.prompt_string



   featureSource.on('change', function() {
       makeLabeledDots(<%= @theme_map.name.dashed %>, <%= @theme_map.name.dashed  + '_labels' %>);
       console.log("change feature");
    });


   var gjFormat = new ol.format.GeoJSON();


    // store all data in LineString feature; data generates labeled dot on separate 'label' layer
    featureSource.addFeatures(gjFormat.readFeatures({
      "type": "FeatureCollection",
        "features": [{
           "type": "Feature",
           "geometry": { "type": "LineString",
             "coordinates": [[ -122.3610877, 47.68375396 ], [-122.3626, 47.683001],[-122.342632, 47.688888888]]
           },
           "properties": {
             "name": "my_path_1",
             "content": "This is where I like to go when I take a walk.",
             "times_per_month":"5"
           }
         },
         {
           "type": "Feature",
             "geometry": { "type": "LineString",
             "coordinates": [[ -122.3630877, 47.68475396 ], [-122.3626, 47.684001],[-122.342632, 47.689888888]]
           },
           "properties": {
             "name": "my_path_2",
             "content": "walking to grocery store",
             "times_per_month":"2"
           }
         }
        ]}
    ));


    var my_features = featureSource.getFeatures();
    for(i=0; i<my_features.length; i++) {
      my_features[i].getGeometry().transform("EPSG:4326","EPSG:3857");
    }


    var modify = new ol.interaction.Modify({
      features: features,
      // the SHIFT key must be pressed to delete vertices, so
      // that new vertices can be drawn at the same position
      // of existing vertices
      deleteCondition: function(event) {
        return ol.events.condition.shiftKeyOnly(event) &&
          ol.events.condition.singleClick(event);
        }
      });
      map.addInteraction(modify);


      var draw;
      function addInteraction() {
        draw = new ol.interaction.Draw({
          features: features,
          type: (typeSelect.value)
       });
       map.addInteraction(draw);
     }


      var typeSelect = document.getElementById('type');
        typeSelect.onchange = function(e) {
          map.removeInteraction(draw);
       addInteraction();
    };


    // create array of geometries and labels
    function makeLabeledDots(geom_layer, label_layer) {
        console.log ('dots!');
        my_source = geom_layer.getSource();
        lineFeatures = my_source.getFeatures();
        label_source = label_layer.getSource();
        label_source.clear();
        geometries = [];
        geometry_labels = [];
        for (var i = 0; i < lineFeatures.length; i = i+1) {
          if (lineFeatures[i] != null) {
            var geometry = lineFeatures[i].getGeometry();
            coords = geometry.flatCoordinates;
            console.log(coords);
            len = coords.length;
            lastCoord = coords[len-1];
            console.log(lastCoord);
            pointCoords = [coords[len-2], coords[len-1]];
            pointFeature = new ol.Feature({
               geometry: new ol.geom.Point(pointCoords),
            });
            pointFeature.getGeometry().transform("EPSG:4326","EPSG:3857");

            labelSource.addFeature(pointFeature);
          }
        }
      }






    /*

       
  function emptyFeatures(){
        <%= @theme_map.name.dashed %>.source.clear();
        <%= @theme_map.name.dashed  + '_labels' %>.source.clear();
        exist_geometries = [];
        exist_labels = [];
        exist_features = [];
      }


      function buildFeatures(){
        console.log("buildfeatures() exist_geometries = ", exist_geometries);
        if (exist_geometries[0] == 'none found' || exist_geometries == 'none found') {
            console.log("no features found");
            exist_geometries = []; // it will hold any geometry that we enter via mouse clicks
            exist_labels = [];
            return;
        }
        geometries = [];
        geometry_labels = [];
        for(i=0; i < exist_geometries.length; i++) {
          // var geom = new ol.format.WKT.readFeatures(unescape(exist_geometries[i]));
          var geom = new ol.Geometry.fromWKT(unescape(exist_geometries[i]));
          console.log("geom= ", geom);
          feature = new ol.Feature.Vector(geom, {geometry_feature_attribute: exist_labels[i]});
          exist_features[i] = feature;
        }
        // triggers the makeLabeledDots function through the 'featuresadded' event callback
        <%= @theme_map.name.dashed %>.addFeatures(exist_features);
      }
*/

// <!-- end open_layers_interactive_functions -->

</script>

<!--  end show.html.erb  -->
