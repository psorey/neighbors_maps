<!---   show.html.erb -->

<% content_for :navbar_brand do %>
  <%= @theme_map.name  %>
<% end -%>

  <div class="container-fluid">
    <div class="row-fluid">
      <div class="span12 fill">
        <div id="map" class="map"></div>
        <% if @theme_map.is_interactive  %>
        <form class="form-inline">

          <table class='my-map-controls'>
            <tr>
              <td><label>mapping tasks: &nbsp;</label>
                <select id="type">
                  <option value="None" selected >--select--</option>
                  <!--        <option value="Point">describe destinations</option>   -->
                  <option value="LineString">draw walking paths</option>
                  <!-- <option value="Polygon">identify safety issues</option>   -->
                </select>
              </td>
            </form>
              <td><%= link_to "revert", @theme_map, data:{"revert-geo-db": "none"}  %></td>
              <td><%= link_to "save",   @theme_map, data:{"update-geo-db": "none"} %></td>
              <td><%= link_to "delete feature", @theme_map, data:{"delete-feature": "none"}  %></td>
              <!--     <td><%= link_to "help",   @theme_map, data:{"show-help": "none"}  %></td>  -->
              <!--     <td><%= link_to 'edit theme map', edit_theme_map_path(@theme_map) %></td>  -->
            </tr>
          </table>
          <% end -%>
          <!--        <div style="height: 30px; width: 90px;">
            <div id="indicator" style="display: none; height: 20px; text-align: center;">edits saved</div>
          </div>
          <div id="status"></div>  -->
      </div>
    </div>
  </div>

<script>

$( document ).ready(function() {
     $("select").each(function() { this.selectedIndex = 0 });
});



var fill = new ol.style.Fill({
  color: 'rgba(0,0,0,1)'
});


var circleFill = new ol.style.Fill({
  color: 'rgb(1,1,1)'
});


var stroke = new ol.style.Stroke({
  color: 'rgba(1,0,0,1)',
  width: 3
});


var lightStroke = new ol.style.Stroke({
  color: 'rgba(0,0,0,1)',
  width: 1
});

var styleCache = {};  // todo: use it

// the style function returns an array

function labelStyleFunction(feature, resolution) {
  myStyle = new ol.style.Style({
    fill: fill,
    stroke: stroke,
    image: new ol.style.Circle({
      radius: 12,
      fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, .9)'
    }),
    stroke: new ol.style.Stroke({
      color: 'rgba(255, 0, 0, .9)',
      width: 3
    })
  }),
  text: new ol.style.Text({
    textAlign: "center",
    textBaseline: "middle",
    font: 'Normal 12px Arial',
    text: feature.get("number").toString(),
    fill: fill,
    stroke: lightStroke,
    offsetX:  0,
    offsetY:  0,
    rotation: 0
    })
  })
  return[myStyle];
};


var vectorStyle = new ol.style.Style({
  fill: fill,
  stroke: new ol.style.Stroke({
    color: 'rgba(255,0,0,.9)',
    width: 5
  })
});


var o_layers = new ol.Collection();
var b_layers = new ol.Collection();

//var numBaseLayers;
//var numOverlayLayers;
var overlayLayers = new ol.layer.Group();
overlayLayers.set("title","Overlays");
overlayLayers.setLayers(o_layers);
var baseLayers = new ol.layer.Group();
baseLayers.set("title", "Base Layers");
baseLayers.setLayers(b_layers);


// if interactive
// setup overlay drawing and editing...
var features = new ol.Collection();
var featureSource = new ol.source.Vector({features:features});
var labels = new ol.Collection();
var labelSource = new ol.source.Vector({features:labels});


var <%= @theme_map.name.dashed %>;              // var gs-team-study-areas
var <%= @theme_map.name.dashed + '_labels' %>;  // var gs-team-study-areas_labels

// import non-interactive vector layer data


var gjFormat = new ol.format.GeoJSON({ defaultDataProjection: "EPSG:3857"});

var userId = <%=@current_user_id %>;

// import theme map json object
var tmJson = <%=raw @theme_map_json %>;
var tmLayers = tmJson["layers"];
var newLayer;
var layer;
var source;
var vGeoJson;

console.log(tmLayers);

for(var i in tmLayers) {
  layer = tmLayers[i];
  newLayer = createLayer(layer.layerType);
  newLayer.set("title", layer.title);
  newLayer.set("opacity", layer.opacity/100);
  newLayer.set("visible", layer.visible);
  source = createSource(layer["source"]);
  newLayer.setSource(source);
  if(layer.layerType == 'Vector'){
    vGeoJson = layer["geojson"];
    console.log(vGeoJson);
    if(vGeoJson != 'none') {
      source.addFeatures(gjFormat.readFeatures(vGeoJson, { dataProjection: "EPSG:3857"}));
    }
  }
  if(layer.isBaseLayer) {
    newLayer.set("type","base");
    b_layers.push(newLayer);
  } else {
    o_layers.push(newLayer);
  }
}


function createLayer(layerType) {
  switch(layerType) {
    case 'Image':
        return new ol.layer.Image();
        break;
    case 'Tile':
        return new ol.layer.Tile();
        break;
    case 'Vector':
        return new ol.layer.Vector();
        break;
  }
}


function createSource(src) {
  switch(src["sourceType"]) {
    case 'Stamen':
      return new ol.source.Stamen({layer: src["sourceLayer"]});
        break;
    case 'OSM':
      return new ol.source.OSM();
      break;
    case 'MapQuest':
      return new ol.source.MapQuest({layer: src["sourceLayer"]});
      break;
    case 'ImageWMS': // and is local mapserver WMS: need to allow remote WMS
      return new ol.source.ImageWMS({ url: src["sourceUrl"],
        params: {'LAYERS': src["sourceLayer"], 'VERSION': '1.1.1', 'SRS':'EPSG:3857' },
        serverType: src["wmsServerType"]
      });
      break;
    case 'TileJSON':
      return new ol.source.TileJSON({ url: src["sourceUrl"]});
      break;
    case 'Vector':
      return new ol.source.Vector();
      break;
    default:
      console.log("no constructor for that source type");
  }
}


// todo: property from theme_map_layer overrides map_layer properties (which properties?)

var map = new ol.Map({
      target: 'map',
      layers: [ baseLayers ,  overlayLayers],
      view: new ol.View({
      center: [-13620870.52201, 6056409.356303 ],
      zoom: "14"
    })
  });

  var layerSwitcher = new ol.control.LayerSwitcher({
    tipLabel: 'layer controls'
  });

  map.addControl(layerSwitcher);
  var scaleControl = new ol.control.ScaleLine();
  map.addControl(scaleControl);

//todo: multiple vector layers here:
  /////////////////////////////////////////  interactive ///////////////////////////////

if(tmJson["is_interactive"]){
  // setup overlay drawing and editing...
  <%= @theme_map.name.dashed %> = new ol.layer.Vector({
    title: <%= @theme_map.name %>,
    source: featureSource,
    style: vectorStyle
  }),
  <%= @theme_map.name.dashed + '_labels' %> = new ol.layer.Vector({
    title: "labels",
    source: labelSource,
    style: labelStyleFunction // dotStyle
  })
  map.addLayer(<%= @theme_map.name.dashed %>);
  map.addLayer(<%= @theme_map.name.dashed + '_labels' %>);
  }

  // DELETE_MODE:
  // selection interaction for deleting exactly one feature

  var select = null;  // ref to currently selected interaction
  var toBeDeletedFeatures = new ol.Collection

  // listen for a feature added to toBeDeletedFeatures...to be deleted
  toBeDeletedFeatures.on('add', function(e){
    var feature = toBeDeletedFeatures.item(0);  // should be only one
    if(feature.get("id") == undefined){      // hasn't been saved yet
      endDelete(feature);
      return;
    }
    $.ajax({ url: "/theme_maps/<%=@theme_map.slug%>/delete_feature",
      method: "POST",
      dataType: 'script',
      data: {
        theme_map: {"id":<%=@theme_map.id%> },
        contentType: 'text/javascript',
        feature_id: parseInt(feature.get("id")) }
    })
    .done(function(data) {
      endDelete(feature);  //deleteFeature(e);
    })
    .fail(function (jqXHr, textStatus, errorThrown) {
      alert(errorThrown);
    })
  });



  function endDelete(feature){
    featureSource.removeFeature(feature);
    // leaves an artifact on the unmanaged temp layer -- need to unselect before deleting?
    editMode(); // reset interaction to normal edit mode
  }


  function editMode(){
    $('a[data-delete-feature]').css({ "color": savedColor });
    map.addInteraction(draw);
    map.addInteraction(modify);
    map.removeInteraction(select);
  }


   // select with "click"
   var select = new ol.interaction.Select({
      condition: ol.events.condition.click,
      features: toBeDeletedFeatures
   });


   select.on('select', function(e) {
     // instead of this plus a filter, we are listening
     // for a feature to be added to selectedFeatures collection
   });
   // end DELETE function


   var prompt_title = 'enter a number';               // @theme_map.prompt_title
   var prompt_string = 'estimated trips per month';   // @theme_map.prompt_string

   featureSource.on('change', function() {
     makeLabeledDots(<%= @theme_map.name.dashed %>, <%= @theme_map.name.dashed  + '_labels' %>);
   });


   featureSource.on('addfeature', function(event) {
     console.log("added a feature");
     if(event.feature.get("number") == undefined ) {
        var numProp = prompt(prompt_title, prompt_string);
        event.feature.set("number", numProp); // todo get number from user input
     }
   });

   featureSource.on('removefeature', function() {
     console.log("removed a feature");
   });

   // store all data in LineString feature; data generates labeled dot on separate 'label' layer
   // load data from server into featureSource:
  var geoJson = <%= raw @geo_json %>;
  if(geoJson != 'none') {
    featureSource.addFeatures(gjFormat.readFeatures(geoJson, { dataProjection: "EPSG:3857"}));
  }

 // set up map drawing functions:
 var modify = new ol.interaction.Modify({
   features: features,
   // the SHIFT key must be pressed to delete vertices
   deleteCondition: function(event) {
     return ol.events.condition.shiftKeyOnly(event) &&
        ol.events.condition.singleClick(event);
    }
  });
  map.addInteraction(modify);

  var draw;
  function addInteraction() {
    draw = new ol.interaction.Draw({
      features: features,
      type: (typeSelect.value)
    });
    map.addInteraction(draw);
  }
    
  // needed?
  var typeSelect = document.getElementById('type');
  
  typeSelect.onchange = function(e) {
      map.removeInteraction(draw);
      addInteraction();
  };

  // create array of circles and labels
  function makeLabeledDots() {
    lineFeatures = featureSource.getFeatures();
    labelSource.clear();
    for (var i = 0; i < lineFeatures.length; i++) {
      if (lineFeatures[i] != null) {
        var geometry = lineFeatures[i].getGeometry();
        coords = geometry.flatCoordinates;
        len = coords.length;
        pointCoords = [coords[len-2], coords[len-1]];
        pointFeature = new ol.Feature({
          geometry: new ol.geom.Point(pointCoords)
        });
        pointFeature.set("number", lineFeatures[i].get("number"));
        labelSource.addFeature(pointFeature);
      }
    }
  }

  function getFeaturesJSON(){
    return gjFormat.writeFeatures(featureSource.getFeatures());
  }

  function showHelp(){
    win = new Window('1', {className: "alphacube", title: '<%=@theme_map.name %>',
        width:340, height:450, top:70, left:100, zIndex:1500,
        destroyOnClose: true });
    win.setAjaxContent("/theme_maps/<%=@theme_map.slug%>/send_help",{ id: '<%=@theme_map.name %>'});
    win.show();
  }
 // end interactive ??
  var savedColor = $('a[data-delete-feature]').css("color");

  $('a[data-delete-feature]').click(function(event){
   event.preventDefault();
   console.log("delete feature");
   $('a[data-delete-feature]').css({ "color": "#113" });
   map.removeInteraction(draw);
   map.removeInteraction(modify);
   map.addInteraction(select);

   deleteMode();
  });

 $('a[data-revert-geo-db]').click(function(event){
   event.preventDefault();
    console.log("revert saved");
    $.ajax({ url: "/theme_maps/<%=@theme_map.slug%>/revert_geo_db",
      method: "GET",
      dataType: 'script',
      data: { id: '<%=@theme_map.slug%>' },
    })
    .fail(function (jqXHr, textStatus, errorThrown) {
      alert(errorThrown);
   })
 });

 $('a[data-update-geo-db]').click(function(event){
   event.preventDefault();
   var json = getFeaturesJSON();
   console.log("ajax:update_geo_db in console");
   $.ajax({ url: "/theme_maps/<%=@theme_map.slug%>/update_geo_db",
     method: "POST",
     dataType: 'script',
     data: {
       theme_map: {"id":<%=@theme_map.id%> },
       contentType: 'text/javascript',
       features: unescape(json)}
     })
  .done(function(data) {
  })
  .fail(function (jqXHr, textStatus, errorThrown) {
     alert(errorThrown);
  })
 });

// <!-- end open_layers_interactive_functions -->

</script>

<!--  end show.html.erb  -->
