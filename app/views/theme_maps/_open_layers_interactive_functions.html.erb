<!--  begin  open_layers_interactive_functions -->
<script>
      function emptyFeatures(){
        <%= @theme_map.name.dashed %>.destroyFeatures();
        <%= @theme_map.name.dashed  + '_labels' %>.destroyFeatures();
        exist_geometries = [];
        exist_labels = [];
        exist_features = [];
      }

      function buildFeatures(){
        console.log("buildfeatures() exist_geometries = ", exist_geometries);
        if (exist_geometries[0] == 'none found' || exist_geometries == 'none found') {
          console.log(" we must return");
          exist_geometries = []; // it will hold any geometry that we enter via mouse clicks
          exist_labels = [];
          return;
        }
        geometries = [];
        geometry_labels = [];
        console.log(exist_geometries[0]);
        console.log(exist_geometries[1]);
        console.log(exist_geometries.length);
        for(i=0; i < exist_geometries.length; i = i + 1) { // !!! !!! !!!
          var geom = new ol.Geometry.fromWKT(unescape(exist_geometries[i]));
          console.log("geom= ", geom);
          feature = new ol.Feature.Vector(geom, {geometry_feature_attribute: exist_labels[i]});
          exist_features[i] = feature;
        }
       // this triggers the makeLabeledDots function through the 'featuresadded' event callback      
        <%= @theme_map.name.dashed %>.addFeatures(exist_features);
      }

      function toggleControl(element) {
       // element.preventDefault();
        for(key in drawControls) {
          var control = drawControls[key];
          if(element.value == key && element.checked) {
            console.log("key");
            control.activate();
          } else {
            control.deactivate();
          }
        }
        makeLabeledDots(<%= @theme_map.name.dashed %>, <%= @theme_map.name.dashed  + '_labels' %>);
      }

      function makeLabeledDots(geom_layer, label_layer) {
        var lineFeatures = geom_layer.features; //returns: {Array(ol.Feature.Vector)}
        //console.log("make labeled dots: lineFeatures--> length =", lineFeatures.length(), lineFeatures );
        label_layer.destroyFeatures();
        geometries = [];
        geometry_labels = [];
        for (var i = 0; i < lineFeatures.length; i = i+1) {
          if (lineFeatures[i] != null) {
            var geometry = lineFeatures[i].geometry;
            var nodes = lineFeatures[i].geometry.getVertices();
            var lastNode = nodes[nodes.length -1];
            var pointFeature = new ol.Feature.Vector(lastNode);
            var count = i + '';
            pointFeature.attributes = {
                    geometry_feature_attribute: lineFeatures[i].attributes.geometry_feature_attribute,
                    whichLine: count};
            label_layer.addFeatures(pointFeature);
            var wktwriter=new ol.Format.WKT();
            var wkt=wktwriter.write(lineFeatures[i]);
            geometries.push(wkt);
            geometry_labels.push(lineFeatures[i].attributes.geometry_feature_attribute);
          }
        }
      }
</script>
<!-- end open_layers_interactive_functions -->
