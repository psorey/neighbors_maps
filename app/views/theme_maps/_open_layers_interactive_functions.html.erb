     ///// begin open_layers_interactive_functions ////////////////////////////////
      
      function toggleControl(element) {
        for(key in drawControls) {
          var control = drawControls[key];
          if(element.value == key && element.checked) {
            control.activate();
          } else {
            control.deactivate();
          }
        }
        makeLabeledDots(<%= @theme_map.name.dashed %>, <%= @theme_map.name.dashed  + '_labels' %>);
      }
     
      function update() {
      // reset modification mode
        drawControls.modify.mode = OpenLayers.Control.ModifyFeature.RESHAPE;
      }
     
      var geometries = [];
      var geometry_labels = [];
      
      function makeLabeledDots(geom_layer, label_layer) {
        var lineFeatures = geom_layer.features; //returns: {Array(OpenLayers.Feature.Vector)}               
        label_layer.destroyFeatures();
        geometries = [];
        geometry_labels = [];
        for (var i = 0; i < lineFeatures.length; i = i+1) {       
          if (lineFeatures[i] != null) {                  
            var geometry = lineFeatures[i].geometry;
            var nodes = lineFeatures[i].geometry.getVertices();
            var lastNode = nodes[nodes.length -1];
            var pointFeature = new OpenLayers.Feature.Vector(lastNode);
            var count = i + '';
            pointFeature.attributes = {
                    geometry_feature_attribute: lineFeatures[i].attributes.geometry_feature_attribute,
                    whichLine: count};
            label_layer.addFeatures(pointFeature);
            var wktwriter=new OpenLayers.Format.WKT();
            var wkt=wktwriter.write(lineFeatures[i]);
            geometries.push(wkt);
            geometry_labels.push(lineFeatures[i].attributes.geometry_feature_attribute);
          }
        }
      }
       
     ///// end open_layers_interactive_functions ////////////////////////////////      

