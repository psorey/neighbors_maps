<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Walking Paths Survey</title>
        
        <link rel="stylesheet" href="style.css" type="text/css" />
        <style type="text/css">
            #controlToggle li {
                list-style: none;
            }
            p {
                width: 512px;
            }

            /* avoid pink tiles */
            .olImageLoadError {
                background-color: transparent !important;
            }
        </style>
        <style type="text/css">

            #map {
                width: 900px;
                height: 480px;
                border: 1px solid black;
                padding: 0px;
                margin:0px auto;
                margin-top:30px;
                position:relative;
            }
        </style>

        <!-- <script src="http://www.openlayers.org/api/OpenLayers.js"></script> -->
        
        <%= javascript_include_tag 'OpenLayers-2.8/OpenLayers' %>   
        
        <script type="text/javascript">
            
            // to_do: handle (delete) null frequency lines here, not in controller...
            
            var map, drawControls;
            
            function init(){
                var i;

                var exist_lines = <%= @json_geometry %>;
                var exist_freqs = <%= @json_frequencies %>;
                
                map = new OpenLayers.Map('map');

                var aerial_layer = new OpenLayers.Layer.WMS( "with aerial",
                     "http://mapserver.streetscapes.org/cgi-bin/mapserv?map=/home/paul/mapserver/field_day_maps.map",
                     { layers: 'ortho1,ortho2,zoning2,park,Parcel_Clip,Parcel_Clip_Outline,st_address_Clip',
                       format: 'png24',
                       transparent: 'false'},
                      
                     { maxExtent: new OpenLayers.Bounds(1259300,254000,1269500,262500),
                       scales: [100,200,400,800,1600,3200,6400,12800,25600,51200],
                       units: 'm',
                       projection:new OpenLayers.Projection("epsg:4326"),
                       gutter:0,
                       ratio:1,
                       isBaselayer:true,
                       singleTile:true
                      }
                );
    
                var no_aerial_layer = new OpenLayers.Layer.WMS( "no aerial",
                     "http://mapserver.streetscapes.org/cgi-bin/mapserv?map=/home/paul/mapserver/field_day_maps.map",
                     { layers: 'zoning2,park,Parcel_Clip,Parcel_Clip_Outline,st_address_Clip',
                       format: 'png',
                       transparent: 'false'},
                      
                     { maxExtent: new OpenLayers.Bounds(1259300,254000,1269500,262500),
                       scales: [100,200,400,800,1600,3200,6400,12800,25600,51200],
                       units: 'm',
                       projection: new OpenLayers.Projection("epsg:4326"),
                       gutter:0,
                       ratio:1,
                       isBaselayer:true,
                       singleTile:true
                    }
                );

                OpenLayers.Feature.Vector.style['default']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['temporary']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['default']['strokeColor'] = '#ff0000';
                OpenLayers.Feature.Vector.style['temporary']['strokeColor'] = '#ff7777';
                OpenLayers.Feature.Vector.style['select']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['select']['strokeColor'] = '#3300ff';

                var lineLayer = new OpenLayers.Layer.Vector("Line Layer",
                   { projection: new OpenLayers.Projection("epsg:4326"),
                     opacity:0.5,
                     rendererOptions: {zIndexing: true}
                } );
            
                var lineLabelLayer = new OpenLayers.Layer.Vector("Line Label Layer",
                   { projection: new OpenLayers.Projection("epsg:4326"),
                     opacity:0.5,
                     styleMap: new OpenLayers.StyleMap({'default':{
                        strokeColor: "#ff0000",
                        strokeOpacity: .8,
                        strokeWidth: 3,
                        fillColor: "#FFeeee",
                        fillOpacity: 1,
                        pointRadius: 12,
                        pointerEvents: "visiblePainted",
                        label : "${frequency}",
                        
                        fontColor: "black",
                        fontSize: "20px",
                        fontFamily: "Courier New, monospace",
                        fontWeight: "bold",
                        labelAlign: "cm",
                        graphicZIndex: 100,
                        labelXOffset: "0",
                        labelYOffset: "0"
                    }}),
                     rendererOptions: {zIndexing: true}
                } );
 
                lineLayer.setZIndex(10);
                lineLabelLayer.setZIndex(20);
                 
                /*
                lineLayer.events.register('beforefeatureadded', this, function(obj){
                    console.log ("before line feature added");
                    if(obj.feature.attributes.freq == null)
                    {
                        obj.feature.state = OpenLayers.State.DELETE;
                    }
                } );
                */
                
                lineLabelLayer.events.register('featureadded', this, function(obj){
                    console.log ("label feature added");
                    if(obj.feature.attributes.frequency == null)
                    {
                        obj.feature.destroy;
                        obj.feature.state = OpenLayers.State.DELETE;
                    }
                } );
                
                lineLayer.events.register('featuresadded', this, function(obj){
                    for(i = 0; i < obj.features.length; i = i + 1)
                    {
                        feature = obj.features[i];
                        if(feature.attributes.freq == null)
                        {
                            var n = prompt("Monthly Frequency", "Enter number of trips per month");
                            feature.attributes.freq = n;
                            if (feature.attributes.freq == null)
                            {
                                //feature.destroy;
                                feature.state = OpenLayers.State.DELETE;
                            }
                        }
                    };
                    console.log ("featuresadded");
                    makeLabeledDots(lineLayer, lineLabelLayer); 
                    //lineLayer.refresh();
                    //lineLabelLayer.refresh();
                } );
                
                
                /*
                // add the labels after adding the lines...
                lineLayer.events.register('featureadded', this, function(obj){
                    console.log ("feature added");
                    if(obj.feature.attributes.freq == null)
                    {
                        var n = prompt("Monthly Frequency", "Please enter number of trips per month:");
                        obj.feature.attributes.freq = n;
                    }
                    makeLabeledDots(lineLayer, lineLabelLayer);
                } );
                */

 
                // update the label layer after editing the lines...
                lineLayer.events.register('afterfeaturemodified', this, function(obj){
                    makeLabeledDots(lineLayer, lineLabelLayer);
                } );

                map.addLayers([no_aerial_layer, aerial_layer, lineLayer, lineLabelLayer /*, walk_survey_layer */]);
                map.addControl(new OpenLayers.Control.LayerSwitcher());
                map.addControl(new OpenLayers.Control.MousePosition());
                
                var deleteFeature = function(feature) {   // SelectFeature callback function
                    select.unselectAll();
                    lineLayer.destroyFeatures(feature);
                    lineLayer.selectedFeatures = [];
                    makeLabeledDots(lineLayer, lineLabelLayer);
                 };
                 
                var select = new OpenLayers.Control.SelectFeature(lineLayer,
                {
                    onSelect: deleteFeature,  // calls deleteFeature(selected_feature)
                    clickout: true
                } );

                drawControls = {
                    line: new OpenLayers.Control.DrawFeature(lineLayer,
                                OpenLayers.Handler.Path),
                    modify: new OpenLayers.Control.ModifyFeature(lineLayer),
                    select: select  // for deleting lines
                };

                for(var key in drawControls) {
                    map.addControl(drawControls[key]);
                };
 
                map.zoomToMaxExtent();
                document.getElementById('noneToggle').checked = true;
 
                // now add the walk_survey paths and frequencies from the database-loaded arrays...
 
                var exist_features = []
                for(i=0; i < exist_lines.length; i = i + 1)
                {
                    var geom = new OpenLayers.Geometry.fromWKT(exist_lines[i]);
                    feature = new OpenLayers.Feature.Vector(geom, {freq: exist_freqs[i]});
                    exist_features[i] = feature;
                };
                console.log("adding all existing features");
                lineLayer.addFeatures(exist_features);
                
                // and this triggers the makeLabeledDots function through
                // the 'featuresadded' event callback
                
            } // end of init().

            function update() {
                // reset modification mode
                // drawControls.modify.mode = OpenLayers.Control.ModifyFeature.RESHAPE;
            }

            function toggleControl(element) {
                for(key in drawControls) {
                    var control = drawControls[key];
                    if(element.value == key && element.checked) {
                        control.activate();
                    } else {
                        control.deactivate();
                    }
                }
                //update();
            }
            
            function makeLabeledDots(lineLayer, lineLabelLayer) {
                var lineFeatures = lineLayer.features; //returns: {Array(OpenLayers.Feature.Vector)}               
                lineLabelLayer.destroyFeatures();
                
                var line_geometries = [];
                var frequencies = [];
                //var line_ids = [];
                //var line_status = [];
                
                for (var i = 0; i < lineFeatures.length; i = i+1) {       
                    if (lineFeatures[i] != null) {                  
                        var geometry = lineFeatures[i].geometry;
                        var nodes = lineFeatures[i].geometry.getVertices();
                        var lastNode = nodes[nodes.length -1];
                        var pointFeature = new OpenLayers.Feature.Vector(lastNode);
                        var count = i + '';
                        pointFeature.attributes = {frequency: lineFeatures[i].attributes.freq, whichLine: count};
                        lineLabelLayer.addFeatures(pointFeature);
                        var wktwriter=new OpenLayers.Format.WKT();
                        var wkt=wktwriter.write(lineFeatures[i]);
                        line_geometries.push(wkt);
                        frequencies.push(lineFeatures[i].attributes.freq);
                        //line_ids.push(lineFeatures[i].attributes.id);
                        //line_status.push(lineFeatures[i].attributes.line_status)
                    }
                }

                // store the latest multi-line data for transmitting to controller...
                json_routes = JSON.stringify(line_geometries);
                json_freqs = JSON.stringify(frequencies);
                
                console.log("routes = %s", line_geometries);
                console.log("frequencies = %s", frequencies);

                document.survey_form.elements[1].value = json_routes;
                document.survey_form.elements[2].value = json_freqs;
                //document.survey_form.elements[3].value = json_ids;
            }

        </script>
    </head>
    <body onload="init()">
<p style="color: green"><%= notice %></p>

<% form_for(@walk_survey, :html=>{:name=>'survey_form'}) do |f| %>
  <%= f.error_messages %>

        <%= hidden_field(:line, :route) %>
        <%= hidden_field(:line2, :frequency) %>

        <div id="tags"></div>

        <div id="map" class="smallmap"></div>
        <ul id="controlToggle">
            <li>
                <input type="radio" name="type" value="none" id="noneToggle"
                       onclick="toggleControl(this);" checked="checked" />
                <label for="noneToggle">navigate: pan and zoom</label>
            </li>
            <li>
                <input type="radio" name="type" value="line" id="lineToggle" onclick="toggleControl(this);" />
                <label for="lineToggle">draw line, then double-click to end the line</label>
            </li>
            <li>
                <input type="radio" name="type" value="modify" id="modifyToggle"
                       onclick="toggleControl(this);" onchange="update();" />
                <label for="modifyToggle">modify a line</label>
            </li>
           <li>
                <input type="radio" name="type" value="select" id="selectToggle"
                       onclick="toggleControl(this);" onchange="update();" />
                <label for="selectToggle">delete a line</label>
            </li>

        </ul>

        <div id="docs">


        </div>
  <p>
    <%= f.submit 'Submit' %>
  </p>
<% end %>

