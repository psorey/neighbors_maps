<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Draw Feature Example</title>
        
        <link rel="stylesheet" href="style.css" type="text/css" />
        <style type="text/css">
            #controlToggle li {
                list-style: none;
            }
            p {
                width: 512px;
            }

            /* avoid pink tiles */
            .olImageLoadError {
                background-color: transparent !important;
            }
        </style>
    <style type="text/css">
        body {
          width:100%;
          height:100%;
    border: 0px;
    margin-left: 100px;
    padding: 0px;
    font:sans-serif;
    font-size:small;
    }
    #map {
    width: 1000px;
    height: 525px;
    border: 1px solid black;
    padding: 0px;
    margin:0px auto;
    margin-top:30px;
    position:relative;
    }
    </style>

        <script src="http://www.openlayers.org/api/OpenLayers.js"></script>
        <script type="text/javascript">
            var map, drawControls;
            function init(){
                map = new OpenLayers.Map('map');

                var aerial_layer = new OpenLayers.Layer.WMS( "with aerial",
                     "http://mapserver.streetscapes.org/cgi-bin/mapserv?map=/home/paul/mapserver/field_day_maps.map",
                     { layers: 'ortho1,ortho2,zoning2,park,Parcel_Clip,Parcel_Clip_Outline,st_address_Clip',
                       format: 'png24',
                       transparent: 'false'},
                      
                     { maxExtent: new OpenLayers.Bounds(1259300,254000,1269500,262500),
                       scales: [100,200,400,800,1600,3200,6400,12800,25600,51200],
                       units: 'm',
                       projection:new OpenLayers.Projection("epsg:4326"),
                       gutter:0,
                       ratio:1,
                       isBaselayer:true,
                       singleTile:true,
                       }
                );
    
                var no_aerial_layer = new OpenLayers.Layer.WMS( "no aerial",
                     "http://mapserver.streetscapes.org/cgi-bin/mapserv?map=/home/paul/mapserver/field_day_maps.map",
                     { layers: 'zoning2,park,Parcel_Clip,Parcel_Clip_Outline,st_address_Clip',
                       format: 'png',
                       transparent: 'false'},
                      
                     { maxExtent: new OpenLayers.Bounds(1259300,254000,1269500,262500),
                       scales: [100,200,400,800,1600,3200,6400,12800,25600,51200],
                       units: 'm',
                       projection:new OpenLayers.Projection("epsg:4326"),
                       gutter:0,
                       ratio:1,
                       isBaselayer:true,
                       singleTile:true,
                       }
                );
                
                var walk_survey_layer = new OpenLayers.Layer.WMS( "walk survey",
                     "http://mapserver.streetscapes.org/cgi-bin/mapserv?map=/home/paul/mapserver/field_day_maps.map&filter_string=neighbor_id='2'",
                     { layers: 'walk_survey',
                       format: 'png',
                       transparent: 'true'},
                      
                     { maxExtent: new OpenLayers.Bounds(1259300,254000,1269500,262500),
                       scales: [100,200,400,800,1600,3200,6400,12800,25600,51200],
                       units: 'm',
                       projection:new OpenLayers.Projection("epsg:4326"),
                       gutter:0,
                       ratio:1,
                       isBaselayer:false,
                       singleTile:true,
                       opacity:0.5
                       }
                );

/*
                var myStyles = new OpenLayers.StyleMap({
                    "default": new OpenLayers.Style({
                        strokeColor: "#ff9900",
                        strokeWidth: 5
                    }),
                    "temporary": new OpenLayers.Style({
                        strokeColor: "#ff9955",
                        strokeWidth: 5
                    }),
                    "select": new OpenLayers.Style({
                        strokeWidth: 5,
                        strokeColor: "#0099ff"
                    })
                });
*/

                OpenLayers.Feature.Vector.style['default']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['temporary']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['default']['strokeColor'] = '#ff0000';
                OpenLayers.Feature.Vector.style['temporary']['strokeColor'] = '#ff7777';
                OpenLayers.Feature.Vector.style['select']['strokeWidth'] = '4';
                OpenLayers.Feature.Vector.style['select']['strokeColor'] = '#3300ff';

                var lineLayer = new OpenLayers.Layer.Vector("Line Layer",
                   { projection: new OpenLayers.Projection("epsg:4326"),
                     opacity:0.5,
                     rendererOptions: {zIndexing: true}

                   }
                                                                                                                                                     
                );
                

                var lineLabelLayer = new OpenLayers.Layer.Vector("Line Label Layer",
                   { projection: new OpenLayers.Projection("epsg:4326"),
                     opacity:0.5,
                     styleMap: new OpenLayers.StyleMap({'default':{
                        strokeColor: "#ff0000",
                        strokeOpacity: .8,
                        strokeWidth: 3,
                        fillColor: "#FFffff",
                        fillOpacity: 1,
                        pointRadius: 12,
                        pointerEvents: "visiblePainted",
                        label : "${frequency}",
                        
                        fontColor: "black",
                        fontSize: "20px",
                        fontFamily: "Courier New, monospace",
                        fontWeight: "bold",
                        labelAlign: "cm",
                        graphicZIndex: 100,
                        labelXOffset: "0",
                        labelYOffset: "0"
                    }}),
                     rendererOptions: {zIndexing: true}

                    }                                                                                                                              
                );
                
                
                lineLayer.setZIndex(10);
                lineLabelLayer.setZIndex(20);
                
                lineLayer.events.register('featureadded', this, function(obj){
                  var wktwriter=new OpenLayers.Format.WKT();
                  var wkt=wktwriter.write(obj.feature);
                  
                  //console.log(wkt);
                  document.survey_form.elements[1].value = wkt;
                  var lineFeatures = lineLayer.features
                  var pointFeatures = makeLabeledDots(lineFeatures, lineLabelLayer);
                  
                } );
                
                 lineLayer.events.register('afterfeaturemodified', this, function(obj){
                  var wktwriter=new OpenLayers.Format.WKT();
                  var wkt=wktwriter.write(obj.feature);
                  
                  //console.log(wkt);
                  document.survey_form.elements[1].value = wkt;
                  var lineFeatures = lineLayer.features
                  var pointFeatures = makeLabeledDots(lineFeatures, lineLabelLayer);
                  
                } );
               
                 lineLayer.events.register('beforefeaturehighlighted', this, function(obj){
                  var wktwriter=new OpenLayers.Format.WKT();
                  var wkt=wktwriter.write(obj.feature);
                  lineLayer.removeFeatures(obj.feature);
                  console.log(wkt);
                  document.survey_form.elements[1].value = wkt;
                  var lineFeatures = lineLayer.features
                  var pointFeatures = makeLabeledDots(lineFeatures, lineLabelLayer);
                  
                } );
                 //var format = new OpenLayers.Format.GeoJSON();
                 //var str = format.write(layer.features);

                
                map.addLayers([no_aerial_layer, aerial_layer, lineLayer, lineLabelLayer, walk_survey_layer]);
                map.addControl(new OpenLayers.Control.LayerSwitcher());
                map.addControl(new OpenLayers.Control.MousePosition());
                var report = function(feature) {
                     console.log(feature.id);
                     var wktwriter=new OpenLayers.Format.WKT();
                     var wkt=wktwriter.write(feature);
                     console.log(wkt);
                     //feature.unselect();
                     select.unselectAll();
                     lineLayer.destroyFeatures(feature);
                     lineLayer.selectedFeatures = [];

                    console.log('report');
                    var lineFeatures = lineLayer.features
                    var pointFeatures = makeLabeledDots(lineFeatures, lineLabelLayer);
                    wkt=wktwriter.write(lineFeatures);
                     console.log(wkt);
                    console.log('report2');

                 };
                var select = new OpenLayers.Control.SelectFeature(lineLayer,
                    {
                        onSelect: report,
                        clickout: true
                    }
                )
               drawControls = {
                    line: new OpenLayers.Control.DrawFeature(lineLayer,
                                OpenLayers.Handler.Path),
                    modify: new OpenLayers.Control.ModifyFeature(lineLayer),
                    select: select
                };


 


                for(var key in drawControls) {
                    map.addControl(drawControls[key]);
                }
/*
                function report(event) {
                    OpenLayers.Console.log(event.type, event.feature ? event.feature.id : event.components);
                }
                
                lineLayer.events.on({
                    "beforefeaturemodified": report,
                    "featuremodified": report,
                    "afterfeaturemodified": report,
                    "vertexmodified": report,
                    "sketchmodified": report,
                    "sketchstarted": report,
                    "sketchcomplete": report
                });
*/
                map.zoomToMaxExtent();
                document.getElementById('noneToggle').checked = true;
            }

            function update() {
                // reset modification mode
                //drawControls.modify.mode = OpenLayers.Control.ModifyFeature.RESHAPE;
            }

            function toggleControl(element) {
                for(key in drawControls) {
                    var control = drawControls[key];
                    if(element.value == key && element.checked) {
                        control.activate();
                    } else {
                        control.deactivate();
                    }
                }
                update();
            }
            
            function makeLabeledDots(lineFeatures, lineLabelLayer) {
                //var pointFeatures = [];
                //var pointAttributeList = [];
                lineLabelLayer.destroyFeatures();
                var wktwriter=new OpenLayers.Format.WKT();
                var wkt=wktwriter.write(lineFeatures);
                console.log ("makeLabeledDots");
                console.log(wkt);

                for (var i in lineFeatures) {
                    wkt = wktwriter.write(lineFeatures[i]);
                    console.log ("lineFeature");
                    var nodes = lineFeatures[i].geometry.getVertices();
                    var lastNode = nodes[nodes.length -1]
                    var pointFeature = new OpenLayers.Feature.Vector(lastNode)
                    var count = i + ''
                    pointFeature.attributes = {frequency: 7, whichLine: count}
                    //pointFeatures.append(pointFeature);
                    lineLabelLayer.addFeatures(pointFeature);
                }
            }

        </script>
    </head>
    <body onload="init()">
      

<% form_for(@walk_survey, :html=>{:name=>'survey_form'}) do |f| %>
  <%= f.error_messages %>

        <%= hidden_field(:line, :wkt) %>

        <div id="tags"></div>

        <p id="shortdesc">
            walk_surveys/new.html.erb.
        </p>
        <div id="map" class="smallmap"></div>
        <ul id="controlToggle">
            <li>
                <input type="radio" name="type" value="none" id="noneToggle"
                       onclick="toggleControl(this);" checked="checked" />
                <label for="noneToggle">navigate</label>
            </li>
            <li>
                <input type="radio" name="type" value="line" id="lineToggle" onclick="toggleControl(this);" />
                <label for="lineToggle">draw line</label>
            </li>
            <li>
                <input type="radio" name="type" value="modify" id="modifyToggle"
                       onclick="toggleControl(this);" onchange="update();" />
                <label for="modifyToggle">modify feature</label>
            </li>
           <li>
                <input type="radio" name="type" value="select" id="selectToggle"
                       onclick="toggleControl(this);" onchange="update();" />
                <label for="selectToggle">delete feature</label>
            </li>

        </ul>

        <div id="docs">

            <p>With the line drawing control active, click on the map to add the points that make up your line.
            Double-click to finish drawing.</p>


        </div>



  <p>
    <%= f.label :neighbor_id %><br />
    <%= f.text_field :neighbor_id %>
  </p>
  <p>
    <%= f.label :route_frequencies %><br />
    <%= f.text_area :route_frequencies %>
  </p>
  <p>
    <%= f.label :routes %><br />
    <%= f.text_field :routes %>
  </p>
  <p>
    <%= f.submit 'Create' %>
  </p>
<% end %>

<%= link_to 'Back', walk_surveys_path %>